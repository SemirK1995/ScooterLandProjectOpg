@page "/kundekatalog"
@using ScooterLandProjectOpg.Shared.Models
@inject HttpClient Http
@using System.Text.Json
@using ScooterLandProjectOpg.Shared.Enum;



<div class="container my-4">
	<div class="card-header bg-primary text-white text-center">
		<h3 class="card-title">Kunde Katalog</h3>
	</div>

	<!-- Søgefelt og knapper -->
	<div class="form-group mt-3 d-flex">
		<input id="search" type="text" class="form-control me-2"
			   @bind="søgeTekst"
			   placeholder="Søg på Kunde ID, Navn eller Telefonnummer" />
		<button class="btn btn-primary me-2" @onclick="SøgKunder">Søg</button>
		<button class="btn btn-secondary" @onclick="RydSøgning">Ryd</button>
	</div>

	<!-- Indlæsningstilstand -->
	@if (kunder == null)
	{
		<div class="text-center">
			<p class="text-muted">Loading...</p>
		</div>
	}
	else
	{
		<!-- Opret Kunde-knap -->
		<div class="text-center my-3">
			<button class="btn custom-btn" @onclick="VisOpretModal">Opret Kunde</button>
			<style>
				.custom-btn {
					background: linear-gradient(to bottom, #4f81bd, #1f4e79); /* Samme gradient som boksen */
					color: white; /* Tekstfarve */
					border: none; /* Fjern kant */
					border-radius: 25px; /* Afrundede hjørner */
					padding: 10px 20px; /* Størrelse på knappen */
					font-size: 16px; /* Tekststørrelse */
					box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2); /* Skygge */
					transition: all 0.3s ease-in-out; /* Glidende hover-effekt */
				}

					.custom-btn:hover {
						background: linear-gradient(to bottom, #1f4e79, #4f81bd); /* Omvendt gradient på hover */
						transform: scale(1.1); /* Gør knappen lidt større */
						box-shadow: 0px 6px 8px rgba(0, 0, 0, 0.3); /* Mere markant skygge */
					}
			</style>
		</div>

		<!-- Kundetabel -->
		<table class="table table-striped table-hover">
			<thead class="table-primary">
				<tr>
					<th>ID</th>
					<th>Navn</th>
					<th>Email</th>
					<th>Telefon</th>
					<th>Adresse</th>
					<th>Scootere</th>
					<th>Handlinger</th>
				</tr>
			</thead>
			<tbody>
				@if (filtreredeKunder.Any())
				{
					@foreach (var kunde in filtreredeKunder)
					{
						<tr>
							<td>@kunde.KundeId</td>
							<td>@kunde.Navn</td>
							<td>@kunde.Email</td>
							<td>@kunde.Telefonnummer</td>
							<td>@kunde.Adresse</td>
							<td>
								<button class="btn btn-light shadow-sm text-primary hover-highlight px-3 py-2" @onclick="() => ToggleScooterVisning(kunde.KundeId)">
									<i class="bi bi-eye-fill"></i> Vis Scootere
								</button>
							</td>
							<td>
								<div class="d-flex justify-content-evenly">
									<button class="btn btn-primary btn-sm me-2" @onclick="() => ÅbnSidePanel(kunde.KundeId)">Se Ordrer</button>
									<button class="btn btn-secondary btn-sm me-2" @onclick="() => VisRedigerModal(kunde)">Rediger</button>
									<button class="btn btn-info btn-sm" @onclick="() => VisTilføjScooterModal(kunde)">Tilføj Scooter</button>
								</div>
							</td>
						</tr>

						@if (kundeScootere.TryGetValue(kunde.KundeId, out var scootere) && visScooterKundeId == kunde.KundeId)
						{
							<tr>
								<td colspan="7" class="bg-light">
									@if (scootere != null && scootere.Any())
									{
										<table class="table table-bordered mt-3">
											<thead class="table-secondary">
												<tr>
													<th>Mærke</th>
													<th>Model</th>
													<th>Registreringsnummer</th>
												</tr>
											</thead>
											<tbody>
												@foreach (var scooter in scootere)
												{
													<tr>
														<td>@scooter.Maerke</td>
														<td>@scooter.Model</td>
														<td>@scooter.RegistreringsNummer</td>
													</tr>
												}
											</tbody>
										</table>
									}
									else
									{
										<div class="text-center text-muted py-2">
											Kunde har ingen scooter.
										</div>
									}
								</td>
							</tr>
						}

					}
				}
				else
				{
					<tr>
						<td colspan="7" class="text-center">Ingen kunder matcher søgningen.</td>
					</tr>
				}
			</tbody>
		</table>
	}
</div>

@if (visTilføjScooterModal)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header bg-primary text-white">
					<h5 class="modal-title">Tilføj Scooter til @valgtKunde.Navn</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="LukTilføjScooterModal"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="nyScooter" OnValidSubmit="TilføjScooter">
						<DataAnnotationsValidator />
						<div class="mb-3">
							<label for="maerke" class="form-label">Mærke</label>
							<InputText @bind-Value="nyScooter.Maerke" id="maerke" class="form-control" placeholder="Indtast mærke" />
							<ValidationMessage For="@(() => nyScooter.Maerke)" />
						</div>
						<div class="mb-3">
							<label for="model" class="form-label">Model</label>
							<InputText @bind-Value="nyScooter.Model" id="model" class="form-control" placeholder="Indtast model" />
							<ValidationMessage For="@(() => nyScooter.Model)" />
						</div>
						<div class="mb-3">
							<label for="registreringsNummer" class="form-label">Registreringsnummer</label>
							<InputText @bind-Value="nyScooter.RegistreringsNummer" id="registreringsNummer" class="form-control" placeholder="Indtast registreringsnummer" />
							<ValidationMessage For="@(() => nyScooter.RegistreringsNummer)" />
						</div>
						<div class="mb-3">
							<label for="produktionsAar" class="form-label">Produktionsår</label>
							<InputNumber @bind-Value="nyScooter.ProduktionsAar" id="produktionsAar" class="form-control" placeholder="Indtast produktionsår" />
							<ValidationMessage For="@(() => nyScooter.ProduktionsAar)" />
						</div>
						<div class="d-flex justify-content-end">
							<button type="submit" class="btn btn-primary">Tilføj Scooter</button>
						</div>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
}

@if (visSidePanel)
{
	<div class="sidepanel bg-light shadow-sm position-fixed" style="width: 400px; top: 0; right: 0; height: 100%; overflow-y: auto; z-index: 1050;">
		<div class="sidepanel-header bg-primary text-white p-3 d-flex justify-content-between align-items-center">
			<h5 class="m-0">Kundeoplysninger</h5>
			<button class="btn-close btn-close-white" @onclick="LukSidePanel"></button>
		</div>
		<div class="sidepanel-body p-4">
			@if (søgeResultatKunde != null)
			{
				<div class="mb-4">
					<p><strong>Kunde ID:</strong> @søgeResultatKunde.KundeId</p>
					<p><strong>Navn:</strong> @søgeResultatKunde.Navn</p>
					<p><strong>Email:</strong> @søgeResultatKunde.Email</p>
					<p><strong>Telefon:</strong> @søgeResultatKunde.Telefonnummer</p>
					<p><strong>Adresse:</strong> @søgeResultatKunde.Adresse</p>
				</div>

				<h5 class="text-primary mb-3">Ordrer</h5>
				@if (søgeResultatKunde.Ordre != null && søgeResultatKunde.Ordre.Any())
				{
					<table class="table table-bordered">
						<thead class="table-light">
							<tr>
								<th>Ordre ID</th>
								<th>Dato</th>
								<th>Total Pris</th>
								<th>Status</th>
								<th>Handling</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var ordre in søgeResultatKunde.Ordre)
							{
								<tr>
									<td>@ordre.OrdreId</td>
									<td>@(ordre.Dato.HasValue ? ordre.Dato.Value.ToString("dd-MM-yyyy") : "N/A")</td>
									<td>@ordre.TotalPris kr.</td>
									<td>
										<div class="d-flex align-items-center">
											<select class="form-select form-select-sm me-2" @bind="ordre.Status">
												@foreach (var status in Enum.GetValues<OrdreStatus>())
												{
													<option value="@status">@status</option>
												}
											</select>
											<button class="btn btn-sm btn-primary" @onclick="() => OpdaterOrdreStatus(ordre)">Opdater</button>
										</div>
									</td>
									<td>
										<button class="btn btn-sm btn-info" @onclick="() => VisOrdreDetaljer(ordre.OrdreId)">Se Detaljer</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				}
				else
				{
					<p class="text-muted">Kunden har ingen ordrer.</p>
				}
			}
			else
			{
				<p>Indlæser kundeoplysninger...</p>
			}
		</div>
	</div>
}
@if (visOrdreDetaljerModal)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header bg-primary text-white">
					<h5 class="modal-title">Ordre Detaljer (Ordre ID: @valgtOrdre.OrdreId)</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="LukOrdreDetaljerModal"></button>
				</div>
				<div class="modal-body">
					<!-- Ordre Ydelser -->
					<h5 class="text-primary mb-3">Ydelser</h5>
					@if (valgtOrdre.OrdreYdelse != null && valgtOrdre.OrdreYdelse.Any())
					{
						<table class="table table-bordered">
							<thead class="table-light">
								<tr>
									<th>Ydelse</th>
									<th>Pris</th>
									<th>Scooter</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var ydelse in valgtOrdre.OrdreYdelse)
								{
									<tr>
										<td>@ydelse.Ydelse?.Navn</td>
										<td>@ydelse.BeregnetPris kr.</td>
										<td>@ydelse.Scooter?.Maerke @ydelse.Scooter?.Model</td>
									</tr>
								}
							</tbody>
						</table>
					}
					else
					{
						<p class="text-muted">Ingen ydelser tilføjet.</p>
					}

					<!-- Ordre Produkter -->
					<h5 class="text-primary mb-3">Produkter</h5>
					@if (valgtOrdre.OrdreProdukter != null && valgtOrdre.OrdreProdukter.Any())
					{
						<table class="table table-bordered">
							<thead class="table-light">
								<tr>
									<th>Produkt</th>
									<th>Antal</th>
									<th>Pris pr. enhed</th>
									<th>Total</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var produkt in valgtOrdre.OrdreProdukter)
								{
									<tr>
										<td>@produkt.Produkt?.ProduktNavn</td>
										<td>@produkt.Antal</td>
										<td>@produkt.Pris kr.</td>
										<td>@(produkt.Antal * produkt.Pris) kr.</td>
									</tr>
								}
							</tbody>
						</table>
					}
					else
					{
						<p class="text-muted">Ingen produkter tilknyttet denne ordre.</p>
					}

					<!-- Lejeaftale -->
					<h5 class="text-primary mb-3">Lejeaftale</h5>
					@if (valgtOrdre.LejeAftale != null)
					{
						<div class="mb-3">
							<p><strong>Startdato:</strong> @valgtOrdre.LejeAftale.StartDato?.ToString("dd-MM-yyyy")</p>
							<p><strong>Slutdato:</strong> @valgtOrdre.LejeAftale.SlutDato?.ToString("dd-MM-yyyy")</p>
							<p><strong>Daglig Leje:</strong> @valgtOrdre.LejeAftale.DagligLeje kr.</p>
							<p><strong>Forsikringspris:</strong> @valgtOrdre.LejeAftale.ForsikringsPris kr.</p>
							<p><strong>Kilometer pris:</strong> @valgtOrdre.LejeAftale.KilometerPris kr.</p>
							<p><strong>Antal kørte Km:</strong> @valgtOrdre.LejeAftale.KortKilometer Km.</p>
							<p><strong>Selvrisiko:</strong> @valgtOrdre.LejeAftale.Selvrisiko Kr.</p>
						</div>
						<h6 class="text-primary">Scootere</h6>
						@if (valgtOrdre.LejeAftale.LejeScooter != null && valgtOrdre.LejeAftale.LejeScooter.Any())
						{
							<ul class="list-unstyled">
								@foreach (var scooter in valgtOrdre.LejeAftale.LejeScooter)
								{
									<li>🛵 @scooter.ScooterMaerke @scooter.ScooterModel</li>
								}
							</ul>
						}
						else
						{
							<p class="text-muted">Ingen scootere knyttet til lejeaftalen.</p>
						}
					}
					else
					{
						<p class="text-muted">Ingen lejeaftale knyttet til denne ordre.</p>
					}

					<!-- Total Pris -->
					<h5 class="text-primary mt-4">Total Pris</h5>
					<p class="fs-5"><strong>@valgtOrdre.TotalOrdrePris kr.</strong></p>
				</div>
				<div class="modal-footer">
					<button class="btn btn-secondary" @onclick="LukOrdreDetaljerModal">Luk</button>
				</div>
			</div>
		</div>
	</div>
}
@if (visModal)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header bg-primary text-white">
					<h5 class="modal-title">@modalTitel</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="LukModal"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="valgtKunde" OnValidSubmit="GemKunde">
						<DataAnnotationsValidator />
						<div class="row">
							<!-- Navn -->
							<div class="col-md-6 mb-3">
								<label for="navn" class="form-label"><strong>Navn:</strong></label>
								<InputText id="navn" @bind-Value="valgtKunde.Navn" class="form-control" />
								<ValidationMessage For="@(() => valgtKunde.Navn)" />
							</div>
							<!-- Email -->
							<div class="col-md-6 mb-3">
								<label for="email" class="form-label"><strong>Email:</strong></label>
								<InputText id="email" @bind-Value="valgtKunde.Email" class="form-control" />
								<ValidationMessage For="@(() => valgtKunde.Email)" />
							</div>
						</div>
						<div class="row">
							<!-- Telefon -->
							<div class="col-md-6 mb-3">
								<label for="telefon" class="form-label"><strong>Telefon:</strong></label>
								<InputNumber id="telefon" @bind-Value="valgtKunde.Telefonnummer" class="form-control" />
								<ValidationMessage For="@(() => valgtKunde.Telefonnummer)" />
							</div>
							<!-- Adresse -->
							<div class="col-md-6 mb-3">
								<label for="adresse" class="form-label"><strong>Adresse:</strong></label>
								<InputText id="adresse" @bind-Value="valgtKunde.Adresse" class="form-control" />
								<ValidationMessage For="@(() => valgtKunde.Adresse)" />
							</div>
						</div>
						<div class="modal-footer mt-3">
							<button class="btn btn-primary" type="submit">Gem</button>
							<button class="btn btn-danger" @onclick="VisBekræftSletModal">Slet</button>
						</div>
					</EditForm>
				</div>
			</div>
		</div>
	</div>
}
@if (visBekræftSletModal)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-sm">
			<div class="modal-content">
				<div class="modal-header bg-danger text-white">
					<h5 class="modal-title">Bekræft Sletning</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="LukBekræftSletModal"></button>
				</div>
				<div class="modal-body text-center">
					<p class="fw-bold">Er du sikker på, at du vil slette kunden?</p>
					<p class="text-danger"><strong>@valgtKunde.Navn</strong></p>
				</div>
				<div class="modal-footer d-flex justify-content-between">
					<button class="btn btn-secondary w-45" @onclick="LukBekræftSletModal">Annuller</button>
					<button class="btn btn-danger w-45" @onclick="SletBekræftetKunde">Ja, Slet</button>
				</div>
			</div>
		</div>
	</div>
}

<style>
	.sidepanel {
		position: fixed;
		right: 0;
		top: 0;
		height: 100%;
		width: 400px;
		background-color: #f8f9fa;
		box-shadow: -3px 0px 10px rgba(0, 0, 0, 0.3);
		overflow-y: auto;
		padding: 20px;
		z-index: 1050;
	}
</style>

<div class="d-flex justify-content-center align-items-center position-relative mt-4" style="height: 200px;">
	<div class="alert border rounded-3 text-center"
		 style="max-width: 700px; width: 90%; padding: 20px; background: linear-gradient(to bottom, #1D3557, #457B9D); color: white;">
		<h4 class="fw-bold mb-3">
			<i class="fas fa-motorcycle"></i> Scooterland
		</h4>
		<div class="d-flex justify-content-between">
			<div class="text-start">
				<p class="mb-2">
					<strong><i class="fas fa-map-marker-alt"></i> Adresse:</strong> Hovedgade 123, 4000 Roskilde
				</p>
				<p class="mb-2">
					<strong><i class="fas fa-phone-alt"></i> Telefon:</strong> 12 34 56 78
				</p>
			</div>
			<div class="text-start">
				<p class="mb-2">
					<strong><i class="fas fa-envelope"></i> Email:</strong> kontakt@scooterland.dk
				</p>
				<p class="mb-0">
					<strong><i class="fas fa-calendar-alt"></i> Dags dato:</strong> @DateTime.Now.ToString("dd-MM-yyyy")
				</p>
			</div>
		</div>
	</div>
</div>

<style>
	.alert {
		background: linear-gradient(to bottom, #1D3557, #457B9D); /* Match farve fra sidebar */
		border: none; /* Fjern kant */
	}

		.alert h4 {
			font-size: 1.75rem; /* Fremhæv overskriften */
			color: white; /* Hvid tekst */
		}

		.alert p {
			font-size: 1rem; /* Læsbar tekst */
			color: white; /* Hvid tekst */
		}

		.alert i {
			margin-right: 8px; /* Plads mellem ikon og tekst */
			color: white; /* Hvid farve til ikoner */
		}

		.alert .text-start {
			flex: 1; /* Fordel pladsen ligeligt */
		}
</style>


<link rel="stylesheet" href="css/ScooterAnimation.css">

<div class="scooter-container">

	<svg class="scooter" xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 128 128" style="transform: scaleX(-1);">

		<path fill="#ea6c3a" d="M109.4 59.1h8.8c2 0 3.5 1.6 3.5 3.5c0 2-1.6 3.5-3.5 3.5h-8.8z" />
		<path fill="#fac136" d="M29.6 25.3c-.4 2.8-1.1 8.1-1.5 10.9c-.2 1.1-1.4 1.8-2.4 1.3c-2.9-1.4-4.7-4.5-4.2-7.8s3.1-5.8 6.2-6.4c1.1-.2 2.1.8 1.9 2" />
		<circle cx="19.4" cy="90.2" r="17.5" fill="#2f2f2f" />
		<circle cx="19.4" cy="90.2" r="9.7" fill="#65878d" />
		<circle cx="97.7" cy="90.2" r="17.5" fill="#2f2f2f" />
		<circle cx="97.7" cy="90.2" r="9.7" fill="#65878d" />
		<path fill="#47c0e5" d="M95.7 54.7h.2c2.1.1 31.3 2.8 31.3 34.6c0 1.9-1.6 3.5-3.5 3.5H51.6c-7.6 0-14.7-3.3-19.7-9l-9.6-11.1c-1.3-1.5-1.8-3.5-1.4-5.5c2-9.1 5.9-17.7 11.6-25.2l1.8-2.4h7.5l-7 28.9c.5 8.7 7.8 15.5 16.5 15.6h12.3c5.6 0 10.1-4.5 10.1-10.1c0-3.5-1.8-6.7-4.8-8.6L63 61.7c-1.2-.8-2-2.2-2-3.6v-3.5h34.7z" />
		<path fill="#bae9f3" d="M94.6 62.1q-.15 0 0 0c-.8 0-1.4.7-1.4 1.4c0 .8.6 1.4 1.4 1.4c12.3 0 22.2 9.9 22.2 22.2c0 .8.6 1.4 1.4 1.4s1.4-.6 1.4-1.4c0-13.8-11.2-25-25-25" />
		<path fill="#2f2f2f" d="M66.2 58.5L61 56.1c-.8-.4-1.3-1.2-1.3-2c0-4.7 3.8-8.6 8.6-8.6h14.5c4.9 0 9.9-.3 14.8-1c4.8-.4 8.8 3.4 8.8 8.2v3.4c0 1.1-.9 2.1-2.1 2.1l-30.8 1.3c-2.5.5-5 .1-7.3-1m43.5-31.1l-.1.2c-1.8 2.7-2.8 5.8-2.8 9v2c0 .9.6 1.8 1.5 2.1l1.2.4c1.1.3 2.3-.3 2.7-1.4l3-9.9c.4-1.2-.3-2.4-1.5-2.7l-1.7-.5c-.9-.3-1.8 0-2.3.8" />
		<path fill="#2f2f2f" d="M115.5 30c.6.2.9.8.7 1.4l-5.7 20.2c-.5 1.9-2 3.5-3.8 4.2l-2.5 1v-2.5l.6-.2c2-.7 3.5-2.3 4.1-4.4l5.2-19c.2-.5.8-.9 1.4-.7" />
		<path fill="#47c0e5" d="M42.7 37.4L44 33c.4-1.2 0-2.6-1-3.4L38.8 26c-1.7-1.4-3.8-2.3-6-2.5l-6.5-.5c-.5 0-.9.2-1.1.6l-.8 1.8c-1.3 2.9-1.9 6-1.7 9.1l.1 1.7c0 .5.4.9.9 1l4.3.6c3.4.5 5.5 4 4.2 7.3l8.6-1.7z" />
		<path fill="#2f2f2f" d="M38.4 26s-1.8-.8-2.8 1.7c-1 2.4 1.1 4.6 1.1 4.6l7.5 2.5c1.5.5 3.1-.5 3.4-2.1c.2-1.1-.4-2.2-1.4-2.7z" />
		<path fill="#47c0e5" d="M3 83.7h4.5c10.3.1 20.3 3.4 28.8 9.4c1.4 1 3.3-.1 3.2-1.9c-.1-2.2-.5-5.2-1.6-8.3c-2-6-6.2-11.3-12.8-13.1c-13.7-3.7-21 5.5-23.9 10.6c-.7 1.6.3 3.3 1.8 3.3" />
		<path fill="none" stroke="#bae9f3" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2.5" d="M15 74.4s7.2-2.4 13.1 2.1c4 3 5.3 7.3 5.3 7.3" />
	</svg>

</div>


@code {
	private List<Kunde> kunder = new();
	private Kunde valgtKunde = new();
	private Kunde kundeTilSletning = new();
	private Kunde søgeResultatKunde = new();
	private KundeScooter nyScooter = new();
	private bool visTilføjScooterModal = false;
	private bool visModal = false;
	private bool visSidePanel = false;
	private string modalTitel = "";
	private int søgeKundeId;
	private bool visBekræftSletModal = false;


	private int valgtOrdreId; // Gemmer det valgte ordre-ID
	private Ordre? valgtOrdre; // Indeholder detaljer om den valgte ordre
	private bool visOrdreDetaljerModal; // Styrer modalens synlighed
	private Dictionary<int, List<KundeScooter>> kundeScootere = new(); // Holder scootere for hver kunde
	private int? visScooterKundeId = null;

	private string søgeTekst = ""; // Søgeteksten fra brugeren
	private List<Kunde> filtreredeKunder = new(); // Den filtrerede liste af kunder
	private string SøgeTekst
	{
		get => søgeTekst;
		set
		{
			if (søgeTekst != value)
			{
				søgeTekst = value;
				_ = PerformSearchAsync(); // Kald søgning når søgeTekst ændres

			}
		}
	}
	private async Task PerformSearchAsync()
	{
		await SøgKunder();
		StateHasChanged(); // Tving UI-opdatering
	}

	private void VisScootere(int kundeId)
	{
		Console.WriteLine($"Henter scootere for kunde med ID: {kundeId}");
		// Du kan implementere en modal eller navigere til en anden side
	}

	private async Task ToggleScooterVisning(int kundeId)
	{
		if (visScooterKundeId == kundeId)
		{
			visScooterKundeId = null; // Skjul
		}
		else
		{
			try
			{
				// Hent scootere for kunden fra serveren
				var response = await Http.GetAsync($"api/KundeScooter/{kundeId}/scootere");

				if (response.IsSuccessStatusCode)
				{
					var scootere = await response.Content.ReadFromJsonAsync<List<KundeScooter>>();
					kundeScootere[kundeId] = scootere ?? new List<KundeScooter>();
				}
				else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
				{
					// Håndter situationen hvor kunden ikke har nogen scootere
					kundeScootere[kundeId] = new List<KundeScooter>();
				}
				else
				{
					Console.WriteLine($"Fejl ved hentning af scootere for kunde {kundeId}: {response.StatusCode}");
				}

				visScooterKundeId = kundeId; // Vis for valgt kunde
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Fejl ved hentning af scootere for kunde {kundeId}: {ex.Message}");
				kundeScootere[kundeId] = new List<KundeScooter>();
			}
		}

		StateHasChanged(); // Sørg for, at UI opdateres
	}


	protected override async Task OnInitializedAsync()
	{
		await HentAlleKunder(); // Hent kun kunder

	}

	private async Task HentAlleKunder()
	{
		try
		{
			kunder = await Http.GetFromJsonAsync<List<Kunde>>("api/Kunde");
			filtreredeKunder = new List<Kunde>(kunder); // Start med at vise alle kunder
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl ved hentning af kunder: {ex.Message}");
			kunder = new List<Kunde>();
			filtreredeKunder = new List<Kunde>();
		}
	}

	private async Task ÅbnSidePanel(int kundeId)
	{
		søgeKundeId = kundeId;
		visSidePanel = true;
		await HentKundeDetaljer(kundeId);
	}
	private void VisBekræftSletModal()
	{
		kundeTilSletning = valgtKunde;
		visBekræftSletModal = true;
	}

	private void LukBekræftSletModal()
	{
		visBekræftSletModal = false;
	}

	private async Task HentKundeDetaljer(int kundeId)
	{
		try
		{
			søgeResultatKunde = await Http.GetFromJsonAsync<Kunde>($"api/Kunde/{kundeId}/details");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl ved hentning af kundeoplysninger: {ex.Message}");
		}
	}
	private async Task SøgKunder()
	{
		if (string.IsNullOrWhiteSpace(søgeTekst))
		{
			filtreredeKunder = new List<Kunde>(); // Tøm listen, hvis søgefeltet er tomt
		}
		else
		{
			var søgetekstLower = søgeTekst.ToLower();
			filtreredeKunder = kunder.Where(k =>
			k.KundeId.ToString().Contains(søgeTekst) ||
			(!string.IsNullOrEmpty(k.Navn) && k.Navn.ToLower().Contains(søgeTekst.ToLower())) ||
			k.Telefonnummer?.ToString().Contains(søgeTekst) == true

			).ToList();

		}
	}
	// Nulstiller søgefeltet og viser hele listen
	private void RydSøgning()
	{
		søgeTekst = ""; // Nulstil søgeteksten
		filtreredeKunder = new List<Kunde>(kunder); // Vis alle kunder
	}

	private void VisTilføjScooterModal(Kunde kunde)
	{
		valgtKunde = kunde; // Indstil den valgte kunde
		nyScooter = new KundeScooter(); // Nulstil scooterdetaljer
		visTilføjScooterModal = true; // Vis modalvindue
	}
	private void LukTilføjScooterModal()
	{
		visTilføjScooterModal = false; // Skjul modalvindue
	}
	private async Task TilføjScooter()
	{
		try
		{
			// Indstil kundeId til scooteren
			nyScooter.KundeId = valgtKunde.KundeId;

			// Send scooter til API'et
			var response = await Http.PostAsJsonAsync($"api/KundeScooter/{valgtKunde.KundeId}/add-scooter", nyScooter);

			if (response.IsSuccessStatusCode)
			{
				// Vis succesbesked eller opdater data
				await HentAlleKunder();
				LukTilføjScooterModal();
			}
			else
			{
				// Håndter fejl
				Console.WriteLine("Fejl ved oprettelse af scooter.");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"En fejl opstod: {ex.Message}");
		}
	}

	private void LukSidePanel()
	{
		visSidePanel = false;
	}

	private void VisOpretModal()
	{
		valgtKunde = new Kunde();
		modalTitel = "Opret Kunde";
		visModal = true;
	}

	private void VisRedigerModal(Kunde kunde)
	{
		valgtKunde = kunde;
		modalTitel = "Rediger Kunde";
		visModal = true;
	}

	private async Task GemKunde()
	{
		if (valgtKunde.KundeId == 0)
		{
			await Http.PostAsJsonAsync("api/Kunde", valgtKunde);
		}
		else
		{
			await Http.PutAsJsonAsync($"api/Kunde/{valgtKunde.KundeId}", valgtKunde);
		}
		await HentAlleKunder();
		LukModal();
	}

	private void LukModal()
	{
		visModal = false;
	}

	private async Task SletBekræftetKunde()
	{
		try
		{
			// Send DELETE-anmodning til API
			var response = await Http.DeleteAsync($"api/Kunde/{kundeTilSletning.KundeId}");

			if (response.IsSuccessStatusCode)
			{
				// Fjern kunden midlertidigt fra listen
				kunder.Remove(kundeTilSletning);

				// Opdater listen fra serveren i baggrunden
				await HentAlleKunder();

				// Luk modal
				LukBekræftSletModal();
			}
			else
			{
				// Håndter fejl
				var fejl = await response.Content.ReadAsStringAsync();
				Console.WriteLine($"Fejl ved sletning: {fejl}");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl ved sletning af kunde: {ex.Message}");
		}
	}

	private async Task OpdaterOrdreStatus(Ordre ordre)
	{
		try
		{
			var response = await Http.PutAsJsonAsync($"api/Ordre/{ordre.OrdreId}/status", ordre.Status);

			if (response.IsSuccessStatusCode)
			{
				Console.WriteLine($"Ordrestatus for ID {ordre.OrdreId} opdateret til {ordre.Status}.");

				// Tjek, om status er Annulleret eller Betalt
				if (ordre.Status == OrdreStatus.Annulleret || ordre.Status == OrdreStatus.Betalt)
				{
					Console.WriteLine("Udfører yderligere handlinger for status: " + ordre.Status);
				}

				// Opdater listen over kunder eller ordrer, hvis det er nødvendigt
				await HentKundeDetaljer(ordre.KundeId);
			}
			else
			{
				Console.WriteLine($"Fejl ved opdatering af ordrestatus for ID {ordre.OrdreId}.");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"En fejl opstod ved opdatering af status: {ex.Message}");
		}
	}

	private async Task VisOrdreDetaljer(int ordreId)
	{
		try
		{
			valgtOrdre = søgeResultatKunde.Ordre.FirstOrDefault(o => o.OrdreId == ordreId);

			if (valgtOrdre == null)
			{
				Console.WriteLine($"Ingen ordre fundet med ID {ordreId}.");
				return;
			}

			var response = await Http.GetFromJsonAsync<Ordre>($"api/Ordre/{ordreId}");
			if (response != null)
			{
				valgtOrdre = response; // Opdater valgtOrdre
			}

			visOrdreDetaljerModal = true;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl ved hentning af ordredetaljer: {ex.Message}");
		}
	}
	private void LukOrdreDetaljerModal()
	{
		visOrdreDetaljerModal = false;

	}

}
