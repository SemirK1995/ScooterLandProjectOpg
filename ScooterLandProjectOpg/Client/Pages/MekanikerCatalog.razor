@page "/mekanikercatalog"
@using ScooterLandProjectOpg.Shared.Models
@using ScooterLandProjectOpg.Shared.DTO
@inject HttpClient Http

<div class="card shadow-sm mt-4">
	<div class="card-header bg-primary text-white">
		<h3 class="card-title text-center">Mekaniker Katalog</h3>
	</div>
	<div class="card-body">
		@if (mekanikere == null)
		{
			<div class="d-flex justify-content-center my-4">
				<p>Loading...</p>
			</div>
		}
		else
		{
			<div class="d-flex justify-content-center mb-4">
				<button class="btn custom-btn" @onclick="VisOpretModal">Opret Mekaniker</button>
			</div>

			<style>
				.custom-btn {
					background: linear-gradient(to bottom, #4f81bd, #1f4e79); /* Samme gradient som boksen */
					color: white; /* Tekstfarve */
					border: none; /* Fjern kant */
					border-radius: 25px; /* Afrundede hjørner */
					padding: 10px 20px; /* Størrelse på knappen */
					font-size: 16px; /* Tekststørrelse */
					box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2); /* Skygge */
					transition: all 0.3s ease-in-out; /* Glidende hover-effekt */
				}

					.custom-btn:hover {
						background: linear-gradient(to bottom, #1f4e79, #4f81bd); /* Omvendt gradient på hover */
						transform: scale(1.1); /* Gør knappen lidt større */
						box-shadow: 0px 6px 8px rgba(0, 0, 0, 0.3); /* Mere markant skygge */
					}
			</style>


			<table class="table table-striped table-bordered table-hover text-center">
				<thead class="bg-primary text-white">
					<tr>
						<th>ID</th>
						<th>Navn</th>
						<th>Speciale</th>
						<th>Telefonnummer</th>
						<th>Handlinger</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var mekaniker in mekanikere)
					{
						<tr>
							<td>@mekaniker.MekanikerId</td>
							<td>@mekaniker.Navn</td>
							<td>@mekaniker.Speciale</td>
							<td>@mekaniker.Telefonnummer</td>
							<td>
								<div class="d-flex justify-content-evenly">
									<button class="btn btn-primary btn-sm" @onclick="() => VisRedigerModal(mekaniker)">Rediger</button>
									<button class="btn btn-secondary btn-sm" @onclick="() => VisTildelModal(mekaniker)">Book arbejdsopgave</button>
									<button class="btn btn-info btn-sm" @onclick="() => VisArbejdsopgaverModal(mekaniker)">Se arbejdsopgaver</button>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
	</div>
</div>

@if (visArbejdsopgaverModal)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-dialog-centered modal-lg">
			<div class="modal-content shadow">
				<div class="modal-header bg-primary text-white">
					<h5 class="modal-title">Arbejdsopgaver for @valgtMekaniker.Navn</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="LukArbejdsopgaverModal"></button>
				</div>
				<div class="modal-body">
					@if (string.IsNullOrEmpty(emptyMessage))
					{
						<div class="table-responsive">
							<table class="table table-striped align-middle">
								<thead class="table-light">
									<tr>
										<th>Ydelse</th>
										<th>Startdato</th>
										<th>Slutdato</th>
										<th>Scooter</th>
										<th>Planlagte Timer</th>
									</tr>
								</thead>
								<tbody>
									@foreach (var opgave in arbejdsopgaver)
									{
										<tr>
											<td>@opgave.Ydelse?.Navn</td>
											<td>@opgave.StartDato?.ToString("dd-MM-yyyy")</td>
											<td>@opgave.SlutDato?.ToString("dd-MM-yyyy")</td>
											<td>@($"{opgave.Scooter?.Maerke} {opgave.Scooter?.Model}")</td>
											<td>@opgave.Timer</td>
										</tr>
									}
								</tbody>
							</table>
						</div>
					}
					else
					{
						<p class="text-muted text-center">@emptyMessage</p>
					}
				</div>
				<div class="modal-footer d-flex justify-content-center">
					<button class="btn btn-secondary rounded-pill px-4" @onclick="LukArbejdsopgaverModal">Luk</button>
				</div>
			</div>
		</div>
	</div>
}



@if (visModal)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content shadow">
				<div class="modal-header bg-primary text-white">
					<h5 class="modal-title">@modalTitel</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="LukModal"></button>
				</div>
				<div class="modal-body">
					<EditForm Model="valgtMekaniker" OnValidSubmit="GemMekaniker">
						<DataAnnotationsValidator />
						<div class="mb-3">
							<label for="navn" class="form-label">Navn:</label>
							<InputText @bind-Value="valgtMekaniker.Navn" id="navn" class="form-control" />
							<ValidationMessage For="@(() => valgtMekaniker.Navn)" />
						</div>
						<div class="mb-3">
							<label for="speciale" class="form-label">Speciale:</label>
							<InputText @bind-Value="valgtMekaniker.Speciale" id="speciale" class="form-control" />
							<ValidationMessage For="@(() => valgtMekaniker.Speciale)" />
						</div>
						<div class="mb-3">
							<label for="telefonnummer" class="form-label">Telefonnummer:</label>
							<InputNumber @bind-Value="valgtMekaniker.Telefonnummer" id="telefonnummer" class="form-control" />
							<ValidationMessage For="@(() => valgtMekaniker.Telefonnummer)" />
						</div>
						<div class="d-flex justify-content-end">
							<button type="submit" class="btn btn-primary rounded-pill px-4">Gem</button>
						</div>
					</EditForm>
				</div>
				<div class="modal-footer d-flex justify-content-between">
					@if (valgtMekaniker.MekanikerId != 0)
					{
						<button class="btn btn-danger rounded-pill px-4" @onclick="VisBekræftSletningModal">Slet</button>
					}
					<button class="btn btn-secondary rounded-pill px-4" @onclick="LukModal">Annuller</button>
				</div>
			</div>
		</div>
	</div>
}


@if (visBekræftSletningModal)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content shadow">
				<div class="modal-header bg-danger text-white">
					<h5 class="modal-title">Bekræft Sletning</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="LukBekræftSletningModal"></button>
				</div>
				<div class="modal-body">
					<p class="text-center fs-5">Er du sikker på, at du vil slette mekanikeren <strong>@valgtMekaniker.Navn</strong>?</p>
				</div>
				<div class="modal-footer d-flex justify-content-around">
					<button class="btn btn-danger rounded-pill px-4" @onclick="SletMekaniker">Ja, Slet</button>
					<button class="btn btn-secondary rounded-pill px-4" @onclick="LukBekræftSletningModal">Annuller</button>
				</div>
			</div>
		</div>
	</div>
}

@if (visTildelModal)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-xl modal-dialog-centered">
			<div class="modal-content shadow">
				<div class="modal-header bg-primary text-white">
					<h5 class="modal-title">Tilføj arbejdsopgave til @mekanikerTilTildeling.Navn</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="LukTildelModal"></button>
				</div>
				<div class="modal-body" style="overflow-x: auto; max-height: 500px;">
					<div class="table-responsive">
						<table class="table table-bordered align-middle">
							<thead class="table-light">
								<tr>
									<th style="width: 10%;">Ordre Ydelse ID</th>
									<th style="width: 20%;">Ydelse</th>
									<th style="width: 20%;">Scooter</th>
									<th style="width: 15%;">Startdato</th>
									<th style="width: 15%;">Slutdato</th>
									<th style="width: 10%;">Timer</th>
									<th style="width: 10%;">Handling</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var ordreYdelse in ordreYdelser)
								{
									<tr>
										<td>@ordreYdelse.OrdreYdelseId</td>
										<td>@ordreYdelse.YdelseNavn</td>
										<td>@ordreYdelse.ScooterMaerke @ordreYdelse.ScooterModel</td>
										<td>
											<InputDate @bind-Value="ordreYdelse.StartDato"
													   class="form-control rounded-0" style="padding: 2px;" />
										</td>
										<td>
											<InputDate @bind-Value="ordreYdelse.SlutDato"
													   class="form-control rounded-0" style="padding: 2px;" />
										</td>
										<td>
											<InputNumber @bind-Value="ordreYdelse.Timer"
														 class="form-control rounded-0" style="padding: 2px;" />
										</td>
										<td>
											<button class="btn btn-success rounded-pill px-3"
													@onclick="() => VisBekræftTildelModal(ordreYdelse)"
												disabled="@(ordreYdelse.StartDato == null || ordreYdelse.SlutDato == null || ordreYdelse.Timer == null || ordreYdelse.Timer <= 0)">
												Book
											</button>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
				<div class="modal-footer">
					<button class="btn btn-secondary rounded-pill px-4" @onclick="LukTildelModal">Luk</button>
				</div>
			</div>
		</div>
	</div>
}

<!-- Bekræftelsesmodal for tildeling -->
@if (visBekræftTildelModal)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content shadow">
				<div class="modal-header bg-primary text-white">
					<h5 class="modal-title">Bekræft Tildeling</h5>
					<button type="button" class="btn-close btn-close-white" @onclick="LukBekræftTildelModal"></button>
				</div>
				<div class="modal-body">
					<p class="text-center fs-5">
						Er du sikker på, at du vil tilføje mekanikeren
						<strong>@mekanikerTilTildeling.Navn</strong> til ordreydelse:
						<strong>"@ordreYdelseTilBekræftelse?.YdelseNavn"</strong>?
					</p>
				</div>
				<div class="modal-footer d-flex justify-content-center">
					<button class="btn btn-secondary rounded-pill px-4 me-3" @onclick="LukBekræftTildelModal">
						Annuller
					</button>
					<button class="btn btn-success rounded-pill px-4" @onclick="BekræftTildel">
						Bekræft
					</button>
				</div>
			</div>
		</div>
	</div>
}


<div class="d-flex justify-content-center align-items-center position-relative mt-4" style="height: 200px;">
	<div class="alert border rounded-3 text-center"
		 style="max-width: 700px; width: 90%; padding: 20px; background: linear-gradient(to bottom, #1D3557, #457B9D); color: white;">
		<h4 class="fw-bold mb-3">
			<i class="fas fa-motorcycle"></i> Scooterland
		</h4>
		<div class="d-flex justify-content-between">
			<div class="text-start">
				<p class="mb-2">
					<strong><i class="fas fa-map-marker-alt"></i> Adresse:</strong> Hovedgade 123, 4000 Roskilde
				</p>
				<p class="mb-2">
					<strong><i class="fas fa-phone-alt"></i> Telefon:</strong> 12 34 56 78
				</p>
			</div>
			<div class="text-start">
				<p class="mb-2">
					<strong><i class="fas fa-envelope"></i> Email:</strong> kontakt@scooterland.dk
				</p>
				<p class="mb-0">
					<strong><i class="fas fa-calendar-alt"></i> Dags dato:</strong> @DateTime.Now.ToString("dd-MM-yyyy")
				</p>
			</div>
		</div>
	</div>
</div>

<style>
	.alert {
		background: linear-gradient(to bottom, #1D3557, #457B9D); /* Match farve fra sidebar */
		border: none; /* Fjern kant */
	}

		.alert h4 {
			font-size: 1.75rem; /* Fremhæv overskriften */
			color: white; /* Hvid tekst */
		}

		.alert p {
			font-size: 1rem; /* Læsbar tekst */
			color: white; /* Hvid tekst */
		}

		.alert i {
			margin-right: 8px; /* Plads mellem ikon og tekst */
			color: white; /* Hvid farve til ikoner */
		}

		.alert .text-start {
			flex: 1; /* Fordel pladsen ligeligt */
		}
</style>

<link rel="stylesheet" href="css/ScooterAnimation.css">

<div class="scooter-container">

	<svg class="scooter" xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 128 128" style="transform: scaleX(-1);">

		<path fill="#ea6c3a" d="M109.4 59.1h8.8c2 0 3.5 1.6 3.5 3.5c0 2-1.6 3.5-3.5 3.5h-8.8z" />
		<path fill="#fac136" d="M29.6 25.3c-.4 2.8-1.1 8.1-1.5 10.9c-.2 1.1-1.4 1.8-2.4 1.3c-2.9-1.4-4.7-4.5-4.2-7.8s3.1-5.8 6.2-6.4c1.1-.2 2.1.8 1.9 2" />
		<circle cx="19.4" cy="90.2" r="17.5" fill="#2f2f2f" />
		<circle cx="19.4" cy="90.2" r="9.7" fill="#65878d" />
		<circle cx="97.7" cy="90.2" r="17.5" fill="#2f2f2f" />
		<circle cx="97.7" cy="90.2" r="9.7" fill="#65878d" />
		<path fill="#47c0e5" d="M95.7 54.7h.2c2.1.1 31.3 2.8 31.3 34.6c0 1.9-1.6 3.5-3.5 3.5H51.6c-7.6 0-14.7-3.3-19.7-9l-9.6-11.1c-1.3-1.5-1.8-3.5-1.4-5.5c2-9.1 5.9-17.7 11.6-25.2l1.8-2.4h7.5l-7 28.9c.5 8.7 7.8 15.5 16.5 15.6h12.3c5.6 0 10.1-4.5 10.1-10.1c0-3.5-1.8-6.7-4.8-8.6L63 61.7c-1.2-.8-2-2.2-2-3.6v-3.5h34.7z" />
		<path fill="#bae9f3" d="M94.6 62.1q-.15 0 0 0c-.8 0-1.4.7-1.4 1.4c0 .8.6 1.4 1.4 1.4c12.3 0 22.2 9.9 22.2 22.2c0 .8.6 1.4 1.4 1.4s1.4-.6 1.4-1.4c0-13.8-11.2-25-25-25" />
		<path fill="#2f2f2f" d="M66.2 58.5L61 56.1c-.8-.4-1.3-1.2-1.3-2c0-4.7 3.8-8.6 8.6-8.6h14.5c4.9 0 9.9-.3 14.8-1c4.8-.4 8.8 3.4 8.8 8.2v3.4c0 1.1-.9 2.1-2.1 2.1l-30.8 1.3c-2.5.5-5 .1-7.3-1m43.5-31.1l-.1.2c-1.8 2.7-2.8 5.8-2.8 9v2c0 .9.6 1.8 1.5 2.1l1.2.4c1.1.3 2.3-.3 2.7-1.4l3-9.9c.4-1.2-.3-2.4-1.5-2.7l-1.7-.5c-.9-.3-1.8 0-2.3.8" />
		<path fill="#2f2f2f" d="M115.5 30c.6.2.9.8.7 1.4l-5.7 20.2c-.5 1.9-2 3.5-3.8 4.2l-2.5 1v-2.5l.6-.2c2-.7 3.5-2.3 4.1-4.4l5.2-19c.2-.5.8-.9 1.4-.7" />
		<path fill="#47c0e5" d="M42.7 37.4L44 33c.4-1.2 0-2.6-1-3.4L38.8 26c-1.7-1.4-3.8-2.3-6-2.5l-6.5-.5c-.5 0-.9.2-1.1.6l-.8 1.8c-1.3 2.9-1.9 6-1.7 9.1l.1 1.7c0 .5.4.9.9 1l4.3.6c3.4.5 5.5 4 4.2 7.3l8.6-1.7z" />
		<path fill="#2f2f2f" d="M38.4 26s-1.8-.8-2.8 1.7c-1 2.4 1.1 4.6 1.1 4.6l7.5 2.5c1.5.5 3.1-.5 3.4-2.1c.2-1.1-.4-2.2-1.4-2.7z" />
		<path fill="#47c0e5" d="M3 83.7h4.5c10.3.1 20.3 3.4 28.8 9.4c1.4 1 3.3-.1 3.2-1.9c-.1-2.2-.5-5.2-1.6-8.3c-2-6-6.2-11.3-12.8-13.1c-13.7-3.7-21 5.5-23.9 10.6c-.7 1.6.3 3.3 1.8 3.3" />
		<path fill="none" stroke="#bae9f3" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2.5" d="M15 74.4s7.2-2.4 13.1 2.1c4 3 5.3 7.3 5.3 7.3" />
	</svg>

</div>

@code {
	private List<Mekaniker>? mekanikere = new List<Mekaniker>();
	private List<OrdreYdelseDto>? ordreYdelser = new List<OrdreYdelseDto>();
	private List<OrdreYdelse>? arbejdsopgaver = new List<OrdreYdelse>();
	private Mekaniker mekanikerMedOpgaver = new Mekaniker();
	private Mekaniker valgtMekaniker = new Mekaniker();
	private Mekaniker mekanikerTilTildeling = new Mekaniker();
	private bool visArbejdsopgaverModal = false;
	private bool visModal = false;
	private bool visBekræftSletningModal = false;
	private bool visTildelModal = false;
	private bool visBekræftTildelModal = false;
	private string modalTitel = "";
	private OrdreYdelseDto? ordreYdelseTilBekræftelse;
	private string? emptyMessage = null;


	protected override async Task OnInitializedAsync()
	{
		await HentAlleMekanikere();
	}

	private async Task HentAlleMekanikere()
	{
		mekanikere = await Http.GetFromJsonAsync<List<Mekaniker>>("api/Mekaniker");
	}
	
	private async Task VisArbejdsopgaverModal(Mekaniker mekaniker)
	{
		try
		{
			// Hent kun aktive arbejdsopgaver
			arbejdsopgaver = await Http.GetFromJsonAsync<List<OrdreYdelse>>($"api/Mekaniker/{mekaniker.MekanikerId}/arbejdsopgaver/aktive");

			if (arbejdsopgaver == null || !arbejdsopgaver.Any())
			{
				arbejdsopgaver = new List<OrdreYdelse>(); // Sæt til en tom liste
				emptyMessage = $"Ingen aktive arbejdsopgaver fundet for mekanikeren {mekaniker.Navn}.";
			}
			else
			{
				emptyMessage = null; // Ryd beskeden, hvis der findes data
			}

			valgtMekaniker = mekaniker;
			visArbejdsopgaverModal = true;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl ved hentning af arbejdsopgaver: {ex.Message}");
		}
	}

	private void LukArbejdsopgaverModal()
	{
		visArbejdsopgaverModal = false;
		arbejdsopgaver = new List<OrdreYdelse>();
	}

	private void VisOpretModal()
	{
		valgtMekaniker = new Mekaniker();
		modalTitel = "Opret Mekaniker";
		visModal = true;
	}

	private void VisRedigerModal(Mekaniker mekaniker)
	{
		valgtMekaniker = new Mekaniker
			{
				MekanikerId = mekaniker.MekanikerId,
				Navn = mekaniker.Navn,
				Speciale = mekaniker.Speciale,
				Telefonnummer = mekaniker.Telefonnummer
			};
		modalTitel = "Rediger Mekaniker";
		visModal = true;
	}

	private void VisBekræftSletningModal()
	{
		visBekræftSletningModal = true;
	}

	private void LukBekræftSletningModal()
	{
		visBekræftSletningModal = false;
	}

	private async Task SletMekaniker()
	{
		if (valgtMekaniker.MekanikerId > 0)
		{
			var response = await Http.DeleteAsync($"api/Mekaniker/{valgtMekaniker.MekanikerId}");
			if (response.IsSuccessStatusCode)
			{
				await HentAlleMekanikere();
			}
		}
		LukModal();
		LukBekræftSletningModal();
	}

	private async Task HentIkkeTildelteOrdreYdelser()
	{
		ordreYdelser = await Http.GetFromJsonAsync<List<OrdreYdelseDto>>("api/ordreydelse/ikke-tildelt");
	}

	private async Task VisTildelModal(Mekaniker mekaniker)
	{
		mekanikerTilTildeling = mekaniker;
		await HentIkkeTildelteOrdreYdelser();
		visTildelModal = true;
	}

	private void LukTildelModal()
	{
		visTildelModal = false;
	}

	private void VisBekræftTildelModal(OrdreYdelseDto ydelse)
	{
		ordreYdelseTilBekræftelse = ydelse;
		visBekræftTildelModal = true;
	}

	private async Task BekræftTildel()
	{
		if (ordreYdelseTilBekræftelse != null)
		{
			var tildelDto = new TildelMekanikerDto
				{
					OrdreYdelseId = ordreYdelseTilBekræftelse.OrdreYdelseId,
					MekanikerId = mekanikerTilTildeling.MekanikerId,
					StartDato = ordreYdelseTilBekræftelse.StartDato,
					SlutDato = ordreYdelseTilBekræftelse.SlutDato,
					Timer = ordreYdelseTilBekræftelse.Timer
				};

			var response = await Http.PutAsJsonAsync("api/OrdreYdelse/tildel", tildelDto);
			if (response.IsSuccessStatusCode)
			{
				await HentIkkeTildelteOrdreYdelser();
			}
			LukBekræftTildelModal();
		}
	}

	private void LukBekræftTildelModal()
	{
		visBekræftTildelModal = false;
	}

	private async Task GemMekaniker()
	{
		if (valgtMekaniker.MekanikerId == 0)
		{
			var response = await Http.PostAsJsonAsync("api/Mekaniker", valgtMekaniker);
			if (response.IsSuccessStatusCode)
			{
				await HentAlleMekanikere();
			}
		}
		else
		{
			var response = await Http.PutAsJsonAsync($"api/Mekaniker/{valgtMekaniker.MekanikerId}", valgtMekaniker);
			if (response.IsSuccessStatusCode)
			{
				await HentAlleMekanikere();
			}
		}
		LukModal();
	}

	private void LukModal()
	{
		visModal = false;
	}
}
