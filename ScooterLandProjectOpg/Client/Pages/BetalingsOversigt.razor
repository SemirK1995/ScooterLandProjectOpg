@page "/betalingsoversigt"
@using ScooterLandProjectOpg.Shared.Models
@using ScooterLandProjectOpg.Shared.Enum
@using ScooterLandProjectOpg.Shared.DTO
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<div class="card shadow-lg mb-4">
    <div class="card-header bg-primary text-white text-center">
        <h3 class="card-title">Betalingsoversigt</h3>
    </div>
    <div class="card-body">
        <div class="mb-3">
            <input type="text" class="form-control mb-3 rounded-pill" placeholder="Søg efter Betalings ID, Ordre ID eller Kundens Navn"
                   @bind="søgeFelt" @onkeypress="HandleSearchKeyPress" />
            <div class="d-flex justify-content-center">
                <button class="btn btn-primary rounded-pill me-2 px-4" @onclick="SøgBetalinger">Søg</button>
                <button class="btn btn-secondary rounded-pill px-4" @onclick="ResetSøgning">Nulstil</button>
            </div>
        </div>
    </div>


</div>


@if (betalinger == null)
{
    <div class="text-center my-4">
        <p class="text-muted">Indlæser betalinger...</p>
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover shadow-sm rounded">
            <thead class="table-primary">
                <tr>
                    <th>Betalings ID</th>
                    <th>Ordre ID</th>
                    <th>Beløb</th>
                    <th>Betalingsmetode</th>
                    <th>Betalt</th>
                    <th>Betalingsdato</th>
                    <th>Handlinger</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var betaling in betalinger)
                {
                    <tr>
                        <td>@betaling.BetalingsId</td>
                        <td>@betaling.OrdreId</td>
                        <td>@betaling.Beløb?.ToString("F2") kr.</td>
                        <td>
                            <select class="form-control form-select"
                                    @onchange="async e => await OpdaterBetalingsMetode(betaling.BetalingsId, e.Value.ToString())">
                                @foreach (var metode in Enum.GetValues<BetalingsMetodeStatus>())
                                {
                                    <option value="@metode.ToString()" selected="@(betaling.BetalingsMetode == metode ? "selected" : null)">
                                        @metode
                                    </option>
                                }
                            </select>
                        </td>
                        <td>
                            <select class="form-control form-select"
                                    @onchange="async e => await OpdaterBetaltStatus(betaling.BetalingsId, e.Value.ToString())">
                                <option value="true" selected="@(betaling.Betalt ? "true" : null)">Ja</option>
                                <option value="false" selected="@(betaling.Betalt ? null : "false")">Nej</option>
                            </select>
                        </td>
                        <td>
                            <input type="date" class="form-control"
                                   value="@betaling.BetalingsDato?.ToString("yyyy-MM-dd")"
                                   disabled />
                        </td>
                        <td>
                            <div class="d-flex justify-content-evenly">
                                <button class="btn btn-info btn-sm" @onclick="() => VisFakturaDetaljer(betaling.BetalingsId)">Vis Faktura</button>
                                <button class="btn btn-primary btn-sm" @onclick="async () => await DownloadFaktura(betaling.BetalingsId)">Download Faktura</button>
                            </div>

                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (visFakturaModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content shadow">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Faktura Detaljer</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="LukFakturaModal"></button>
                </div>
                <div class="modal-body">
                    @if (fakturaData != null)
                    {
                        <div class="mb-4">
                            <h6 class="fw-bold text-primary">Kundeoplysninger:</h6>
                            <p><strong>Kunde ID:</strong> @fakturaData.KundeId</p>
                            <p><strong>Navn:</strong> @fakturaData.KundeNavn</p>
                            <p><strong>Telefon:</strong> @fakturaData.KundeTelefon</p>
                            <p><strong>Email:</strong> @fakturaData.KundeEmail</p>
                            <p><strong>Adresse:</strong> @fakturaData.KundeAdresse</p>
                        </div>
                        <hr />

                        <div class="mb-4">
                            <h6 class="fw-bold text-primary">Betalingsoplysninger:</h6>
                            <p><strong>Betalings ID:</strong> @fakturaData.BetalingsId</p>
                            <p><strong>Ordre ID:</strong> @fakturaData.OrdreId</p>
                            <p><strong>Beløb:</strong> @fakturaData.Beløb kr.</p>
                            <p><strong>Metode:</strong> @fakturaData.BetalingsMetode</p>
                            <p><strong>Status:</strong> @(fakturaData.Betalt ? "Betalt" : "Ikke betalt")</p>
                            <p><strong>Dato:</strong> @fakturaData.BetalingsDato</p>
                        </div>
                        <hr />

                        @if (fakturaData.Lejeaftale != null)
                        {
                            <div class="mb-4">
                                <h6 class="fw-bold text-primary">Lejeaftale:</h6>
                                <p><strong>Startdato:</strong> @fakturaData.Lejeaftale.StartDato?.ToString("dd-MM-yyyy")</p>
                                <p><strong>Slutdato:</strong> @fakturaData.Lejeaftale.SlutDato?.ToString("dd-MM-yyyy")</p>
                                <p><strong>Forsikringspris:</strong> @fakturaData.Lejeaftale.ForsikringsPris kr.</p>
                                <p><strong>Daglig Leje:</strong> @fakturaData.Lejeaftale.DagligLeje kr.</p>
                                <p><strong>Kilometer Pris:</strong> @fakturaData.Lejeaftale.KilometerPris kr.</p>
                                <p><strong>Kørte Kilometer:</strong> @fakturaData.Lejeaftale.KortKilometer?.ToString("F2") km</p>
                                <p><strong>Selvrisiko:</strong> @fakturaData.Lejeaftale.Selvrisiko kr.</p>
                                <ul>
                                    @foreach (var scooter in fakturaData.Lejeaftale.Scootere)
                                    {
                                        <li>@scooter</li>
                                    }
                                </ul>
                            </div>
                            <hr />
                        }

                        @if (fakturaData.Ydelser != null && fakturaData.Ydelser.Any())
                        {
                            <h6 class="fw-bold text-primary">Ydelser:</h6>
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Ydelse ID</th>
                                        <th>Ydelsesnavn</th>
                                        <th>Scooter Mærke</th>
                                        <th>Scooter Model</th>
                                        <th>Pris</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ydelse in fakturaData.Ydelser)
                                    {
                                        <tr>
                                            <td>@ydelse.YdelseId</td>
                                            <td>@ydelse.YdelseNavn</td>
                                            <td>@ydelse.ScooterMaerke</td>
                                            <td>@ydelse.ScooterModel</td>
                                            <td>@ydelse.BeregnetPris?.ToString("F2") kr.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p>Ingen ydelser tilføjet.</p>
                        }

                        @if (fakturaData.Produkter != null && fakturaData.Produkter.Any())
                        {
                            <h6 class="fw-bold text-primary">Produkter:</h6>
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Produkt ID</th>
                                        <th>Produktnavn</th>
                                        <th>Antal</th>
                                        <th>Pris</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var produkt in fakturaData.Produkter)
                                    {
                                        <tr>
                                            <td>@produkt.ProduktId</td>
                                            <td>@produkt.ProduktNavn</td>
                                            <td>@produkt.Antal</td>
                                            <td>@produkt.Pris.ToString("F2") kr.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p>Ingen produkter tilføjet.</p>
                        }

                        <div class="mt-4 text-end">
                            <h5 class="fw-bold">Total Sum: @fakturaData.TotalPris kr.</h5>
                        </div>
                    }
                    else
                    {
                        <p>Indlæser faktura...</p>
                    }
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button class="btn btn-secondary rounded-pill px-4" @onclick="LukFakturaModal">Luk</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="d-flex justify-content-center align-items-center position-relative mt-4" style="height: 200px;">
    <div class="alert border rounded-3 text-center"
         style="max-width: 700px; width: 90%; padding: 20px; background: linear-gradient(to bottom, #1D3557, #457B9D); color: white;">
        <h4 class="fw-bold mb-3">
            <i class="fas fa-motorcycle"></i> Scooterland
        </h4>
        <div class="d-flex justify-content-between">
            <div class="text-start">
                <p class="mb-2">
                    <strong><i class="fas fa-map-marker-alt"></i> Adresse:</strong> Hovedgade 123, 4000 Roskilde
                </p>
                <p class="mb-2">
                    <strong><i class="fas fa-phone-alt"></i> Telefon:</strong> 12 34 56 78
                </p>
            </div>
            <div class="text-start">
                <p class="mb-2">
                    <strong><i class="fas fa-envelope"></i> Email:</strong> kontakt@scooterland.dk
                </p>
                <p class="mb-0">
                    <strong><i class="fas fa-calendar-alt"></i> Dags dato:</strong> @DateTime.Now.ToString("dd-MM-yyyy")
                </p>
            </div>
        </div>
    </div>
</div>

<style>
    .alert {
        background: linear-gradient(to bottom, #1D3557, #457B9D); /* Match farve fra sidebar */
        border: none; /* Fjern kant */
    }

        .alert h4 {
            font-size: 1.75rem; /* Fremhæv overskriften */
            color: white; /* Hvid tekst */
        }

        .alert p {
            font-size: 1rem; /* Læsbar tekst */
            color: white; /* Hvid tekst */
        }

        .alert i {
            margin-right: 8px; /* Plads mellem ikon og tekst */
            color: white; /* Hvid farve til ikoner */
        }

        .alert .text-start {
            flex: 1; /* Fordel pladsen ligeligt */
        }
</style>



@code {
    private List<Betaling> betalinger;
    private FakturaDto? fakturaData; // Dynamisk objekt til faktura
    private bool visFakturaModal = false;
    private string søgeFelt = string.Empty; // Søgefelt

    protected override async Task OnInitializedAsync()
    {
        await HentBetalinger();
    }

    private async Task HentBetalinger()
    {
        betalinger = await Http.GetFromJsonAsync<List<Betaling>>("api/Betalings");
    }
    private async Task SøgBetalinger()
    {
        if (string.IsNullOrWhiteSpace(søgeFelt))
        {
            await HentBetalinger();
            return;
        }

        try
        {
            betalinger = await Http.GetFromJsonAsync<List<Betaling>>($"api/Betalings/search?query={søgeFelt}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Søgefejl: {ex.Message}");
        }
    }

    private void ResetSøgning()
    {
        søgeFelt = string.Empty;
        _ = HentBetalinger(); // Hent alle betalinger igen
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SøgBetalinger();
        }
    }

    private async Task OpdaterBetaltStatus(int betalingsId, string nyStatus)
    {
        var status = nyStatus == "true";

        // DTO til at sende status og dato
        var betalingUpdate = new BetalingUpdateDto
            {
                Betalt = status
            };

        var response = await Http.PutAsJsonAsync($"api/Betalings/{betalingsId}/status", betalingUpdate);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Betalingsstatus og dato opdateret.");

            // Genindlæs fakturaen, hvis den er åben og denne betaling opdateres
            if (visFakturaModal && fakturaData?.BetalingsId == betalingsId)
            {
                await VisFakturaDetaljer(betalingsId);
            }

            await HentBetalinger(); // Opdater listen
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Fejl ved opdatering: {errorMessage}");
        }
    }




    private async Task OpdaterBetalingsMetode(int betalingsId, string nyMetode)
    {
        try
        {
            // Konverter string til enum
            var metode = Enum.Parse<BetalingsMetodeStatus>(nyMetode, ignoreCase: true);

            // Kald API for at opdatere betalingsmetoden
            var response = await Http.PutAsJsonAsync($"api/Betalings/{betalingsId}/metode", metode);

            if (response.IsSuccessStatusCode)
            {
                // Genindlæs fakturaen, hvis den er åben og denne betaling opdateres
                if (visFakturaModal && fakturaData?.BetalingsId == betalingsId)
                {
                    await VisFakturaDetaljer(betalingsId);
                }
                // Opdater listen, hvis API-kaldet lykkedes
                await HentBetalinger();
            }
            else
            {
                // Håndter fejl
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Fejl ved opdatering: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }


    private async Task VisFakturaDetaljer(int betalingsId)
    {
        try
        {
            fakturaData = await Http.GetFromJsonAsync<FakturaDto>($"api/Betalings/{betalingsId}/faktura");
            visFakturaModal = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved hentning af faktura: {ex.Message}");
        }
    }


    private void LukFakturaModal()
    {
        visFakturaModal = false;
    }

    private async Task DownloadFaktura(int betalingsId)
    {
        // Hent PDF-data fra backend
        var pdfBytes = await Http.GetByteArrayAsync($"api/Betalings/{betalingsId}/download");

        // Kald JavaScript-funktionen
        await JSRuntime.InvokeVoidAsync("downloadFileFromBytes", $"Faktura_{betalingsId}.pdf", pdfBytes);
    }
   
    private async Task OpdaterBetalingsDato(int betalingsId, string nyDato)
    {
        try
        {
            DateTime? dato = string.IsNullOrWhiteSpace(nyDato) ? null : DateTime.Parse(nyDato);

            var response = await Http.PutAsJsonAsync($"api/Betalings/{betalingsId}/dato", dato);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Betalingsdato opdateret.");
                // Opdater listen for at vise den ændrede dato
                await HentBetalinger();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Fejl ved opdatering af betalingsdato: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl: {ex.Message}");
        }
    }

}

