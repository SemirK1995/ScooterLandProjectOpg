@page "/opretordre"
@using ScooterLandProjectOpg.Shared.DTO
@using ScooterLandProjectOpg.Shared.Models
@inject HttpClient Http

<div class="container mt-4">
	<div class="card">
		<div class="card-header bg-primary text-white">
			<h3 class="card-title">Opret Ordre</h3>
		</div>
		<div class="card-body">
			@if (valgtKunde != null)
			{
				<div class="alert alert-info">
					<h5>Valgt Kunde</h5>
					<p>
						<strong>ID:</strong> @valgtKunde.KundeId<br />
						<strong>Navn:</strong> @valgtKunde.Navn<br />
						<strong>Telefon:</strong> @valgtKunde.Telefonnummer
					</p>
					<button class="btn btn-warning" @onclick="RydValgtKunde">Ryd Valg</button>
				</div>
			}

			<style>
				.nav-tabs .nav-link {
					color: #555; /* Neutral farve for inaktive tabs */
					background-color: #f8f9fa; /* Lys baggrund */
					border: 1px solid #dee2e6;
					font-weight: bold;
					border-radius: 5px; /* Bløde hjørner */
				}

					.nav-tabs .nav-link:hover {
						color: #0056b3; /* Blå hover-effekt */
						background-color: #e9ecef; /* Lysere baggrund ved hover */
						transition: all 0.3s ease;
					}

					.nav-tabs .nav-link.active {
						color: #fff; /* Hvid tekst for aktiv tab */
						background-color: #007bff; /* Blå baggrund for aktiv tab */
						border-color: #0056b3; /* Mørkere blå kant */
					}
			</style>

			<!-- Tabs navigation -->
			<ul class="nav nav-tabs">
				<li class="nav-item">
					<a class="nav-link @(aktivTab == "ordre" ? "active" : "")" @onclick="@(() => AktivTabSkift("ordre"))">
						Ordre
					</a>
				</li>
				<li class="nav-item">
					<a class="nav-link @(aktivTab == "lejeaftale" ? "active" : "")" @onclick="@(() => AktivTabSkift("lejeaftale"))">
						Lejeaftale
					</a>
				</li>
				<li class="nav-item">
					<a class="nav-link @(aktivTab == "produkter" ? "active" : "")" @onclick="@(() => AktivTabSkift("produkter"))">
						Produkter
					</a>
				</li>
			</ul>


			<div class="tab-content mt-4">
				@if (aktivTab == "ordre")
				{
					<!-- Opret Ordre Form -->
					<div class="card">
						<div class="card-header bg-secondary text-white">
							<h5>Søg Kunde</h5>
						</div>
						<div class="card-body">
							<div class="form-group">
								<input id="search" class="form-control" @bind="SøgeTekst" placeholder="Søg på Kunde ID, Navn eller Telefonnummer" />
							</div>

							@if (filtreredeKunder.Any())
							{
								<ul class="list-group mt-2">
									@foreach (var kunde in filtreredeKunder)
									{
										<li class="list-group-item d-flex justify-content-between align-items-center">
											<span>@($"{kunde.KundeId} - {kunde.Navn} ({kunde.Telefonnummer})")</span>
											<button class="btn btn-primary btn-sm" @onclick="() => VælgKunde(kunde.KundeId)">Vælg</button>
										</li>
									}
								</ul>
							}
							else if (!string.IsNullOrWhiteSpace(SøgeTekst))
							{
								<p class="text-muted mt-2">Ingen kunder matcher søgningen.</p>
							}
						</div>
					</div>

					<!-- Sektion: Tilgængelige Ydelser -->
					@if (valgtKundeId > 0)
					{
						<div class="card mt-4">
							<div class="card-header bg-secondary text-white">
								<h5>Tilgængelige Ydelser</h5>
							</div>
							<div class="card-body">
								@if (alleYdelser != null && alleYdelser.Any())
								{
									<table class="table table-striped">
										<thead>
											<tr>
												<th>Ydelse</th>
												<th>Standard Pris</th>
												<th>Handling</th>
											</tr>
										</thead>
										<tbody>
											@foreach (var ydelse in alleYdelser)
											{
												<tr>
													<td>@ydelse.Navn</td>
													<td>@ydelse.StandardPris?.ToString("F2") kr.</td>
													<td>
														<button class="btn btn-success btn-sm" @onclick="() => TilføjYdelse(ydelse)">Tilføj</button>
													</td>
												</tr>
											}
										</tbody>
									</table>
								}
								else
								{
									<p class="text-muted">Ingen ydelser tilgængelige.</p>
								}
							</div>
						</div>

						<div class="card mt-4">
							<div class="card-header bg-success text-white">
								<h5>Tilføjede Ydelser</h5>
							</div>
							<div class="card-body">
								@if (valgteOrdreYdelser.Any())
								{
									<table class="table table-striped">
										<thead>
											<tr>
												<th>Ydelse</th>
												<th>Standard Pris</th>
												<th>Aftalt Pris</th>
												<th>Scooter</th>
												<th>Handling</th>
											</tr>
										</thead>
										<tbody>
											@foreach (var ydelse in valgteOrdreYdelser)
											{
												<tr>
													<td>@ydelse.Ydelse.Navn</td>
													<td>@ydelse.Ydelse.StandardPris?.ToString("F2") kr.</td>
													<td>
														<InputNumber @bind-Value="ydelse.AftaltPris" class="form-control" />
													</td>
													<td>
														<select class="form-control" @bind="ydelse.ScooterId">
															<option value="">-- Vælg en scooter --</option>
															@foreach (var scooter in kundeScootere)
															{
																<option value="@scooter.ScooterId">@($"{scooter.Maerke} {scooter.Model}")</option>
															}
														</select>
													</td>
													<td>
														<button class="btn btn-danger btn-sm" @onclick="() => FjernYdelse(ydelse)">Fjern</button>
													</td>
												</tr>
											}
										</tbody>
									</table>
									<h5 class="mt-3">Totalpris: @TotalPris kr.</h5>
									<button class="btn btn-primary mt-3" @onclick="VisBekræftelse">Gem Ordre</button>
								}
								else
								{
									<p class="text-muted">Ingen ydelser er tilføjet.</p>
								}
							</div>
						</div>
					}
				}
				else if (aktivTab == "lejeaftale")
				{
					<div class="card">
						<div class="card-header bg-secondary text-white">
							<h5>Opret Lejeaftale</h5>
						</div>
						<div class="card-body">
							<div class="form-group">
								<label for="startdato">Startdato:</label>
								<input type="date" id="startdato" class="form-control" @bind="lejeaftale.StartDato" />
							</div>
							<div class="form-group">
								<label for="slutdato">Slutdato:</label>
								<input type="date" id="slutdato" class="form-control" @bind="lejeaftale.SlutDato" />
							</div>
							<div class="form-group">
								<label for="dagligLeje">Daglig Leje:</label>
								<input type="number" id="dagligLeje" class="form-control" @bind="lejeaftale.DagligLeje" />
							</div>
							<div class="form-group">
								<label for="forsikringsPris">Forsikringspris pr. dag:</label>
								<input type="number" id="forsikringsPris" class="form-control" @bind="lejeaftale.ForsikringsPris" readonly />
								<small class="text-muted">Selvrisiko på 1000 kr. tilføjes kun i tilfælde af skade.</small>
							</div>
							<div class="form-group">
								<label for="kortKilometer">Kort Kilometer:</label>
								<input type="number" id="kortKilometer" class="form-control" @bind="lejeaftale.KortKilometer" />
							</div>
							<div class="form-group mt-3">
								<label for="scooter">Vælg en ledig scooter:</label>
								@if (ledigeScootere == null || !ledigeScootere.Any())
								{
									<p class="text-warning">Der er i øjeblikket ingen ledige scootere til lejeaftaler.</p>
								}
								else
								{
									<select id="scooter" class="form-control" @bind="valgtLejeScooterId">
										<option value="">-- Vælg en scooter --</option>
										@foreach (var scooter in ledigeScootere)
										{
											<option value="@scooter.LejeScooterId">@($"{scooter.ScooterMaerke} {scooter.ScooterModel} - {scooter.RegistreringsNummer}")</option>
										}
									</select>
								}
							</div>
							<h5 class="mt-4">Samlet pris for lejeaftale: @BeregnLejeAftaleTotalPris() kr.</h5>
							<p class="text-warning">Bemærk: Der er en Selvrisiko på 1000 kr., hvis scooteren returneres med skade.</p>
						</div>
					</div>
				}

				else if (aktivTab == "produkter")
				{
					<div class="card">
						<div class="card-header bg-secondary text-white">
							<h5>Tilføj Produkter</h5>
						</div>
						<div class="card-body">
							<p class="text-muted">Vælg produkter, der skal inkluderes i ordren.</p>
							@if (alleProdukter == null || !alleProdukter.Any())
							{
								<p>Ingen produkter tilgængelige.</p>
							}
							else
							{
								<table class="table table-striped">
									<thead>
										<tr>
											<th>Produkt</th>
											<th>Pris</th>
											<th>Antal</th>
											<th>Handling</th>
										</tr>
									</thead>
									<tbody>
										@foreach (var produkt in alleProdukter)
										{
											<tr>
												<td>@produkt.ProduktNavn</td>
												<td>@produkt.Pris?.ToString("F2") kr.</td>
												<td>
													<InputNumber @bind-Value="produkt.KøbsAntal" class="form-control" />
												</td>
												<td>
													<button class="btn btn-success btn-sm" @onclick="() => TilføjProdukt(produkt)">Tilføj</button>
												</td>
											</tr>
										}
									</tbody>
								</table>
							}
							<h5 class="mt-4">Valgte Produkter:</h5>
							@if (valgteProdukter.Any())
							{
								<table class="table table-striped">
									<thead>
										<tr>
											<th>Produkt</th>
											<th>Pris</th>
											<th>Antal</th>
											<th>Handling</th>
										</tr>
									</thead>
									<tbody>
										@foreach (var produkt in valgteProdukter)
										{
											<tr>
												<td>@produkt.ProduktNavn</td>
												<td>@produkt.Pris?.ToString("F2") kr.</td>
												<td>@produkt.KøbsAntal</td>
												<td>
													<button class="btn btn-danger btn-sm" @onclick="() => FjernProdukt(produkt)">Fjern</button>
												</td>
											</tr>
										}
									</tbody>
								</table>
								<h5>Total pris for produkter: @TotalPrisForProdukter kr.</h5>
							}
							else
							{
								<p>Ingen produkter valgt.</p>
							}
						</div>
					</div>
				}

			</div>
		</div>
	</div>
</div>




<!-- Bekræftelsesmodal -->
@if (visBekræftelsesModal)
{
	<div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Bekræft Oprettelse</h5>
					<button type="button" class="btn-close" @onclick="LukBekræftelsesModal"></button>
				</div>
				<div class="modal-body">
					<p>Er du sikker på, at du vil oprette denne ordre?</p>
				</div>
				<div class="modal-footer">
					<button class="btn btn-danger" @onclick="LukBekræftelsesModal">Annuller</button>
					<button class="btn btn-primary" @onclick="BekræftOprettelse">Bekræft</button>
				</div>
			</div>
		</div>
	</div>
}

@if (visSuccesBesked)
{
	<div class="alert alert-success mt-3">
		Ordren blev oprettet succesfuldt!
	</div>
}
<div class="d-flex justify-content-center align-items-center position-relative mt-4" style="height: 200px;">
	<div class="alert border rounded-3 text-center"
		 style="max-width: 700px; width: 90%; padding: 20px; background: linear-gradient(to bottom, #1D3557, #457B9D); color: white;">
		<h4 class="fw-bold mb-3">
			<i class="fas fa-motorcycle"></i> Scooterland
		</h4>
		<div class="d-flex justify-content-between">
			<div class="text-start">
				<p class="mb-2">
					<strong><i class="fas fa-map-marker-alt"></i> Adresse:</strong> Hovedgade 123, 4000 Roskilde
				</p>
				<p class="mb-2">
					<strong><i class="fas fa-phone-alt"></i> Telefon:</strong> 12 34 56 78
				</p>
			</div>
			<div class="text-start">
				<p class="mb-2">
					<strong><i class="fas fa-envelope"></i> Email:</strong> kontakt@scooterland.dk
				</p>
				<p class="mb-0">
					<strong><i class="fas fa-calendar-alt"></i> Dags dato:</strong> @DateTime.Now.ToString("dd-MM-yyyy")
				</p>
			</div>
		</div>
	</div>
</div>

<style>
	.alert {
		background: linear-gradient(to bottom, #1D3557, #457B9D); /* Match farve fra sidebar */
		border: none; /* Fjern kant */
	}

		.alert h4 {
			font-size: 1.75rem; /* Fremhæv overskriften */
			color: white; /* Hvid tekst */
		}

		.alert p {
			font-size: 1rem; /* Læsbar tekst */
			color: white; /* Hvid tekst */
		}

		.alert i {
			margin-right: 8px; /* Plads mellem ikon og tekst */
			color: white; /* Hvid farve til ikoner */
		}

		.alert .text-start {
			flex: 1; /* Fordel pladsen ligeligt */
		}
</style>
<link rel="stylesheet" href="css/ScooterAnimation.css">

<div class="scooter-container">

	<svg class="scooter" xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 128 128" style="transform: scaleX(-1);">

		<path fill="#ea6c3a" d="M109.4 59.1h8.8c2 0 3.5 1.6 3.5 3.5c0 2-1.6 3.5-3.5 3.5h-8.8z" />
		<path fill="#fac136" d="M29.6 25.3c-.4 2.8-1.1 8.1-1.5 10.9c-.2 1.1-1.4 1.8-2.4 1.3c-2.9-1.4-4.7-4.5-4.2-7.8s3.1-5.8 6.2-6.4c1.1-.2 2.1.8 1.9 2" />
		<circle cx="19.4" cy="90.2" r="17.5" fill="#2f2f2f" />
		<circle cx="19.4" cy="90.2" r="9.7" fill="#65878d" />
		<circle cx="97.7" cy="90.2" r="17.5" fill="#2f2f2f" />
		<circle cx="97.7" cy="90.2" r="9.7" fill="#65878d" />
		<path fill="#47c0e5" d="M95.7 54.7h.2c2.1.1 31.3 2.8 31.3 34.6c0 1.9-1.6 3.5-3.5 3.5H51.6c-7.6 0-14.7-3.3-19.7-9l-9.6-11.1c-1.3-1.5-1.8-3.5-1.4-5.5c2-9.1 5.9-17.7 11.6-25.2l1.8-2.4h7.5l-7 28.9c.5 8.7 7.8 15.5 16.5 15.6h12.3c5.6 0 10.1-4.5 10.1-10.1c0-3.5-1.8-6.7-4.8-8.6L63 61.7c-1.2-.8-2-2.2-2-3.6v-3.5h34.7z" />
		<path fill="#bae9f3" d="M94.6 62.1q-.15 0 0 0c-.8 0-1.4.7-1.4 1.4c0 .8.6 1.4 1.4 1.4c12.3 0 22.2 9.9 22.2 22.2c0 .8.6 1.4 1.4 1.4s1.4-.6 1.4-1.4c0-13.8-11.2-25-25-25" />
		<path fill="#2f2f2f" d="M66.2 58.5L61 56.1c-.8-.4-1.3-1.2-1.3-2c0-4.7 3.8-8.6 8.6-8.6h14.5c4.9 0 9.9-.3 14.8-1c4.8-.4 8.8 3.4 8.8 8.2v3.4c0 1.1-.9 2.1-2.1 2.1l-30.8 1.3c-2.5.5-5 .1-7.3-1m43.5-31.1l-.1.2c-1.8 2.7-2.8 5.8-2.8 9v2c0 .9.6 1.8 1.5 2.1l1.2.4c1.1.3 2.3-.3 2.7-1.4l3-9.9c.4-1.2-.3-2.4-1.5-2.7l-1.7-.5c-.9-.3-1.8 0-2.3.8" />
		<path fill="#2f2f2f" d="M115.5 30c.6.2.9.8.7 1.4l-5.7 20.2c-.5 1.9-2 3.5-3.8 4.2l-2.5 1v-2.5l.6-.2c2-.7 3.5-2.3 4.1-4.4l5.2-19c.2-.5.8-.9 1.4-.7" />
		<path fill="#47c0e5" d="M42.7 37.4L44 33c.4-1.2 0-2.6-1-3.4L38.8 26c-1.7-1.4-3.8-2.3-6-2.5l-6.5-.5c-.5 0-.9.2-1.1.6l-.8 1.8c-1.3 2.9-1.9 6-1.7 9.1l.1 1.7c0 .5.4.9.9 1l4.3.6c3.4.5 5.5 4 4.2 7.3l8.6-1.7z" />
		<path fill="#2f2f2f" d="M38.4 26s-1.8-.8-2.8 1.7c-1 2.4 1.1 4.6 1.1 4.6l7.5 2.5c1.5.5 3.1-.5 3.4-2.1c.2-1.1-.4-2.2-1.4-2.7z" />
		<path fill="#47c0e5" d="M3 83.7h4.5c10.3.1 20.3 3.4 28.8 9.4c1.4 1 3.3-.1 3.2-1.9c-.1-2.2-.5-5.2-1.6-8.3c-2-6-6.2-11.3-12.8-13.1c-13.7-3.7-21 5.5-23.9 10.6c-.7 1.6.3 3.3 1.8 3.3" />
		<path fill="none" stroke="#bae9f3" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2.5" d="M15 74.4s7.2-2.4 13.1 2.1c4 3 5.3 7.3 5.3 7.3" />
	</svg>

</div>

@code {
	private List<Kunde> kunder = new();
	private List<Ydelse> alleYdelser = new();
	private List<LejeScooter> ledigeScootere = new();
	private List<OrdreYdelse> valgteOrdreYdelser = new List<OrdreYdelse>();
	private CreateLejeAftaleDto lejeaftale = new();
	private List<KundeScooter> kundeScootere = new();
	private List<Produkt> alleProdukter = new();
	private List<Produkt> valgteProdukter = new();
	private int valgtKundeId;
	private int? valgtLejeScooterId;
	private int? valgtKundeScooterId;
	private string aktivTab = "ordre";
	private bool visBekræftelsesModal = false;
	private bool visSuccesBesked = false;
	private Kunde valgtKunde; // Gemmer oplysninger om den valgte kunde

	private double? TotalPrisFraBackend { get; set; }

	private string søgeTekst = ""; // Søgeteksten fra brugeren
	private List<Kunde> filtreredeKunder = new(); // Den filtrerede liste af kunder

	private string SøgeTekst
	{
		get => søgeTekst;
		set
		{
			if (søgeTekst != value)
			{
				søgeTekst = value;
				_ = PerformSearchAsync(); // Kald søgning når søgeTekst ændres

			}
		}
	}
	private async Task PerformSearchAsync()
	{
		await SøgKunderAsync();
		StateHasChanged(); // Tving UI-opdatering
	}

	private double TotalPris => valgteOrdreYdelser.Sum(oy => oy.AftaltPris ?? oy.Ydelse.StandardPris ?? 0) + BeregnLejeAftaleTotalPris() + TotalPrisForProdukter;
	private double TotalPrisForProdukter => valgteProdukter.Sum(p => (p.Pris ?? 0) * (p.KøbsAntal));


	// protected override async Task OnInitializedAsync()
	// {
	// 	try
	// 	{
	// 		// Hent kunder og ydelser
	// 		kunder = await Http.GetFromJsonAsync<List<Kunde>>("api/Kunde");
	// 		alleYdelser = await Http.GetFromJsonAsync<List<Ydelse>>("api/Ydelse");
	// 		//Hent produkter
	// 		alleProdukter = await Http.GetFromJsonAsync<List<Produkt>>("api/Produkt");
	// 		// Hent ledige scootere
	// 		ledigeScootere = await Http.GetFromJsonAsync<List<LejeScooter>>("api/lejescooter/available");

	// 		// Hvis ingen scootere er tilgængelige, initialiser en tom liste og log besked
	// 		if (ledigeScootere == null || !ledigeScootere.Any())
	// 		{
	// 			Console.WriteLine("Ingen ledige scootere fundet.");
	// 			ledigeScootere = new List<LejeScooter>();
	// 		}
	// 	}
	// 	catch (HttpRequestException ex)
	// 	{
	// 		Console.WriteLine($"Fejl ved hentning af data: {ex.Message}");
	// 		ledigeScootere = new List<LejeScooter>(); // Initialiser som tom liste for at undgå fejl
	// 	}
	// 	catch (Exception ex)
	// 	{
	// 		Console.WriteLine($"Uventet fejl: {ex.Message}");
	// 		ledigeScootere = new List<LejeScooter>();
	// 	}
	// }
	protected override async Task OnInitializedAsync()
	{
		try
		{
			// Hent kunder og ydelser
			kunder = await Http.GetFromJsonAsync<List<Kunde>>("api/Kunde");
			alleYdelser = await Http.GetFromJsonAsync<List<Ydelse>>("api/Ydelse");

			// Hent produkter
			alleProdukter = await Http.GetFromJsonAsync<List<Produkt>>("api/Produkt") ?? new List<Produkt>();

			// Sæt standardværdien for antal, hvis den ikke allerede er sat
			foreach (var produkt in alleProdukter)
			{
				produkt.KøbsAntal = 1;
			}

			// Hent ledige scootere
			ledigeScootere = await Http.GetFromJsonAsync<List<LejeScooter>>("api/lejescooter/available") ?? new List<LejeScooter>();

			// Hvis ingen scootere er tilgængelige, initialiser en tom liste og log besked
			if (!ledigeScootere.Any())
			{
				Console.WriteLine("Ingen ledige scootere fundet.");
			}
		}
		catch (HttpRequestException ex)
		{
			Console.WriteLine($"Fejl ved hentning af data: {ex.Message}");
			ledigeScootere = new List<LejeScooter>(); // Initialiser som tom liste for at undgå fejl
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Uventet fejl: {ex.Message}");
			ledigeScootere = new List<LejeScooter>();
		}
	}


	private void NulstilOrdreData()
	{
		valgteProdukter.Clear();
		valgteOrdreYdelser.Clear();
		lejeaftale = new CreateLejeAftaleDto();
		valgtLejeScooterId = null;
		valgtKunde = null;
		valgtKundeId = 0;
		TotalPrisFraBackend = null;
		aktivTab = "ordre"; // Sæt standard-tabben tilbage
		visBekræftelsesModal = false;
		visSuccesBesked = false;
		StateHasChanged(); // Tving UI-opdatering
	}
	private void TilføjProdukt(Produkt produkt)
	{
		var eksisterendeProdukt = valgteProdukter.FirstOrDefault(p => p.ProduktId == produkt.ProduktId);
		if (eksisterendeProdukt == null)
		{
			valgteProdukter.Add(new Produkt
				{
					ProduktId = produkt.ProduktId,
					ProduktNavn = produkt.ProduktNavn,
					Pris = produkt.Pris,
					KøbsAntal = produkt.KøbsAntal
				});
		}
		else
		{
			eksisterendeProdukt.KøbsAntal += produkt.KøbsAntal; // Opdater antal
		}
	}


	private void FjernProdukt(Produkt produkt)
	{
		valgteProdukter.Remove(produkt);
	}


	private void FiltrerKunder()
	{
		if (string.IsNullOrWhiteSpace(søgeTekst))
		{
			filtreredeKunder = new List<Kunde>(); // Tøm listen, hvis søgefeltet er tomt
		}
		else
		{
			var søgetekstLower = søgeTekst.ToLower();
			filtreredeKunder = kunder.Where(k =>
			k.KundeId.ToString().Contains(søgeTekst) ||
			(!string.IsNullOrEmpty(k.Navn) && k.Navn.ToLower().Contains(søgeTekst.ToLower())) ||
			k.Telefonnummer?.ToString().Contains(søgeTekst) == true

			).ToList();

		}
	}
	private async Task SøgKunderAsync()
	{
		try
		{
			if (string.IsNullOrWhiteSpace(søgeTekst))
			{
				filtreredeKunder = new List<Kunde>(); // Tøm listen, hvis søgefeltet er tomt
			}
			else
			{
				var response = await Http.GetFromJsonAsync<List<Kunde>>($"api/Kunde/searchmany?søgeTekst={Uri.EscapeDataString(søgeTekst)}");
				filtreredeKunder = response ?? new List<Kunde>();
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl under søgning: {ex.Message}");
			filtreredeKunder = new List<Kunde>(); // Hvis der opstår en fejl
		}
	}
	private async Task VælgKunde(int kundeId)
	{
		valgtKundeId = kundeId;

		// Hent kunden fra filtreredeKunder eller fra API'et, hvis nødvendigt
		valgtKunde = filtreredeKunder.FirstOrDefault(k => k.KundeId == kundeId);

		if (valgtKunde == null)
		{
			valgtKunde = await Http.GetFromJsonAsync<Kunde>($"api/Kunde/{kundeId}");
		}

		søgeTekst = ""; // Ryd søgeteksten
		filtreredeKunder.Clear(); // Tøm resultatlisten
		await HentScootereForKunde(kundeId); // Hent scootere relateret til kunden
		StateHasChanged(); // Tving UI-opdatering
	}
	private void RydValgtKunde()
	{
		valgtKunde = null;
		valgtKundeId = 0;
		filtreredeKunder.Clear();
		StateHasChanged(); // Tving UI-opdatering
	}

	private async Task HentScootereForKunde(int kundeId)
	{
		try
		{
			var response = await Http.GetFromJsonAsync<List<KundeScooter>>($"api/KundeScooter/{kundeId}/scootere");
			kundeScootere = response ?? new List<KundeScooter>();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Fejl ved hentning af scootere: {ex.Message}");
			kundeScootere = new List<KundeScooter>();
		}
	}

	private double BeregnLejeAftaleTotalPris()
	{
		if (lejeaftale == null || !lejeaftale.StartDato.HasValue || !lejeaftale.SlutDato.HasValue || lejeaftale.DagligLeje <= 0)
		{
			return 0; // Returner 0, hvis noget mangler
		}

		var dage = (lejeaftale.SlutDato.Value - lejeaftale.StartDato.Value).Days;
		var kilometerOmkostning = lejeaftale.KortKilometer.HasValue
		? lejeaftale.KilometerPris * lejeaftale.KortKilometer.Value
		: 0;
		var forsikringsPris = lejeaftale.ForsikringsPris * dage;

		return (lejeaftale.DagligLeje * dage) + kilometerOmkostning + forsikringsPris;
	}


	private void AktivTabSkift(string tab) => aktivTab = tab;



	private void TilføjYdelse(Ydelse ydelse)
	{
		if (!valgteOrdreYdelser.Any(oy => oy.Ydelse.YdelseId == ydelse.YdelseId))
		{
			valgteOrdreYdelser.Add(new OrdreYdelse
				{
					Ydelse = ydelse,
					AftaltPris = null,
					Dato = DateTime.Now
				});
		}
	}

	private void FjernYdelse(OrdreYdelse ordreydelse)
	{
		valgteOrdreYdelser.Remove(ordreydelse);
	}

	private void VisBekræftelse()
	{
		visBekræftelsesModal = true;
	}

	private void LukBekræftelsesModal()
	{
		visBekræftelsesModal = false;
	}

	private async Task BekræftOprettelse()
	{
		visBekræftelsesModal = false;

		if (valgtKundeId == 0 || (!valgteOrdreYdelser.Any() && lejeaftale == null))
		{
			Console.WriteLine("Vælg en kunde og tilføj mindst én ydelse eller udfyld lejeaftaledetaljer.");
			return;
		}

		// Tilføj kun lejeaftale, hvis der er en scooter valgt
		if (valgtLejeScooterId.HasValue)
		{
			lejeaftale.LejeScooterId = valgtLejeScooterId.Value;
		}
		else
		{
			lejeaftale = null; // Ingen lejeaftale
		}

		var ordreDTO = new CreateOrdreDto
			{
				KundeId = valgtKundeId,
				Dato = DateTime.Now,
				TotalPris = TotalPris,
				OrdreYdelser = valgteOrdreYdelser.Select(oy => new CreateOrdreYdelseDto
				{
					YdelseId = oy.Ydelse.YdelseId,
					AftaltPris = oy.AftaltPris,
					Dato = DateTime.Now,
					ScooterId = oy.ScooterId
				}).ToList(),
				LejeAftale = lejeaftale,
				OrdreProdukter = valgteProdukter.Select(p => new CreateOrdreProduktDto
				{
					ProduktId = p.ProduktId,
					KøbsAntal = p.KøbsAntal,
					Pris = p.Pris ?? 0
				}).ToList() // Tilføj produkterne
			};

		try
		{
			var response = await Http.PostAsJsonAsync("api/ordre", ordreDTO);
			if (response.IsSuccessStatusCode)
			{
				visSuccesBesked = true;
				NulstilOrdreData(); // Nulstil data
			}
			else
			{
				Console.WriteLine("Fejl ved oprettelse af ordre.");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"En undtagelse opstod: {ex.Message}");
		}
	}
}

